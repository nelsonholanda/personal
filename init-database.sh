#!/bin/bash

# NH-Personal - Script de Inicializa√ß√£o do Banco de Dados
# Para uso com RDS AWS
# Vers√£o: 2.0.0

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Configura√ß√µes do RDS
RDS_HOST="personal-db.cbkc0cg2c7in.us-east-2.rds.amazonaws.com"
RDS_PORT="3306"
RDS_USER="root"
RDS_PASSWORD="rootpassword"
RDS_DATABASE="personal_trainer_db"

# Fun√ß√£o para testar conex√£o com RDS
test_rds_connection() {
    log "Testando conex√£o com RDS..."
    
    if mysql -h "$RDS_HOST" -P "$RDS_PORT" -u "$RDS_USER" -p"$RDS_PASSWORD" -e "SELECT 1;" >/dev/null 2>&1; then
        log "‚úÖ Conex√£o com RDS estabelecida com sucesso"
        return 0
    else
        error "‚ùå Falha na conex√£o com RDS"
        return 1
    fi
}

# Fun√ß√£o para criar banco de dados
create_database() {
    log "Criando banco de dados..."
    
    mysql -h "$RDS_HOST" -P "$RDS_PORT" -u "$RDS_USER" -p"$RDS_PASSWORD" -e "
        CREATE DATABASE IF NOT EXISTS \`$RDS_DATABASE\` 
        CHARACTER SET utf8mb4 
        COLLATE utf8mb4_unicode_ci;
    "
    
    log "‚úÖ Banco de dados criado/verificado com sucesso"
}

# Fun√ß√£o para executar migra√ß√µes do Prisma
run_prisma_migrations() {
    log "Executando migra√ß√µes do Prisma..."
    
    cd /opt/nh-personal/backend
    
    # Configurar vari√°vel de ambiente para o banco
    export DATABASE_URL="mysql://$RDS_USER:$RDS_PASSWORD@$RDS_HOST:$RDS_PORT/$RDS_DATABASE"
    
    # Gerar cliente Prisma
    npx prisma generate
    
    # Executar migra√ß√µes
    npx prisma migrate deploy
    
    log "‚úÖ Migra√ß√µes do Prisma executadas com sucesso"
}

# Fun√ß√£o para inserir dados iniciais
insert_initial_data() {
    log "Inserindo dados iniciais..."
    
    # Conectar ao banco e inserir dados b√°sicos
    mysql -h "$RDS_HOST" -P "$RDS_PORT" -u "$RDS_USER" -p"$RDS_PASSWORD" "$RDS_DATABASE" << 'EOF'
-- Inserir usu√°rio administrador
INSERT IGNORE INTO users (
    name, 
    email, 
    password_hash, 
    role, 
    phone, 
    is_active, 
    password_changed_at, 
    created_at, 
    updated_at
) VALUES (
    'Nholanda Admin',
    'admin@nhpersonal.com',
    '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2i', -- rdms95gn
    'admin',
    '+5511999999999',
    1,
    NOW(),
    NOW(),
    NOW()
);

-- Inserir usu√°rio nholanda
INSERT IGNORE INTO users (
    name, 
    email, 
    password_hash, 
    role, 
    phone, 
    is_active, 
    password_changed_at, 
    created_at, 
    updated_at
) VALUES (
    'Nholanda',
    'nholanda@nhpersonal.com',
    '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.iK2i', -- rdms95gn
    'admin',
    '+5511999999999',
    1,
    NOW(),
    NOW(),
    NOW()
);

-- Inserir m√©todos de pagamento padr√£o
INSERT IGNORE INTO payment_methods (name, description, is_active, created_at) VALUES
('Dinheiro', 'Pagamento em dinheiro', 1, NOW()),
('PIX', 'Pagamento via PIX', 1, NOW()),
('Cart√£o de Cr√©dito', 'Pagamento com cart√£o de cr√©dito', 1, NOW()),
('Cart√£o de D√©bito', 'Pagamento com cart√£o de d√©bito', 1, NOW()),
('Transfer√™ncia Banc√°ria', 'Transfer√™ncia banc√°ria', 1, NOW()),
('Boleto Banc√°rio', 'Pagamento via boleto', 1, NOW());

-- Inserir planos de pagamento padr√£o
INSERT IGNORE INTO payment_plans (name, description, price, duration_weeks, sessions_per_week, is_active, created_at) VALUES
('Plano B√°sico', '3 sess√µes por semana por 4 semanas', 400.00, 4, 3, 1, NOW()),
('Plano Intermedi√°rio', '3 sess√µes por semana por 8 semanas', 720.00, 8, 3, 1, NOW()),
('Plano Avan√ßado', '4 sess√µes por semana por 12 semanas', 1200.00, 12, 4, 1, NOW()),
('Plano Premium', '5 sess√µes por semana por 16 semanas', 1600.00, 16, 5, 1, NOW()),
('Plano Personalizado', 'Sess√µes personalizadas conforme necessidade', 150.00, 1, 1, 1, NOW());

-- Inserir exerc√≠cios padr√£o
INSERT IGNORE INTO exercises (name, description, muscle_group, difficulty_level, instructions, equipment_needed, is_active, created_at) VALUES
('Flex√£o de Bra√ßo', 'Exerc√≠cio para peitoral e tr√≠ceps', 'Peitoral, Tr√≠ceps', 'intermediate', 'Deite-se no ch√£o, apoie as m√£os e fa√ßa flex√µes', 'Nenhum', 1, NOW()),
('Agachamento', 'Exerc√≠cio para pernas e gl√∫teos', 'Quadr√≠ceps, Gl√∫teos', 'beginner', 'Fique em p√©, flexione os joelhos e agache', 'Nenhum', 1, NOW()),
('Prancha', 'Exerc√≠cio para core e estabiliza√ß√£o', 'Core', 'beginner', 'Mantenha o corpo reto apoiado nos cotovelos', 'Nenhum', 1, NOW()),
('Burpee', 'Exerc√≠cio completo de alta intensidade', 'Full Body', 'advanced', 'Combine agachamento, flex√£o e salto', 'Nenhum', 1, NOW()),
('Corrida', 'Exerc√≠cio cardiovascular', 'Cardio', 'beginner', 'Corra em ritmo constante', 'Nenhum', 1, NOW()),
('Levantamento Terra', 'Exerc√≠cio para costas e pernas', 'Costas, Quadr√≠ceps', 'advanced', 'Levante peso do ch√£o mantendo a coluna reta', 'Barra e pesos', 1, NOW()),
('Supino', 'Exerc√≠cio para peitoral', 'Peitoral', 'intermediate', 'Deite-se no banco e levante a barra', 'Banco e barra', 1, NOW()),
('Remada', 'Exerc√≠cio para costas', 'Costas', 'intermediate', 'Puxe o peso em dire√ß√£o ao peito', 'Cabo ou halteres', 1, NOW()),
('Desenvolvimento', 'Exerc√≠cio para ombros', 'Ombros', 'intermediate', 'Levante pesos acima da cabe√ßa', 'Halteres ou barra', 1, NOW()),
('Abdominal', 'Exerc√≠cio para abd√¥men', 'Core', 'beginner', 'Deite-se e levante o tronco', 'Nenhum', 1, NOW());

EOF

    log "‚úÖ Dados iniciais inseridos com sucesso"
}

# Fun√ß√£o para verificar integridade do banco
verify_database() {
    log "Verificando integridade do banco de dados..."
    
    # Verificar se as tabelas foram criadas
    TABLE_COUNT=$(mysql -h "$RDS_HOST" -P "$RDS_PORT" -u "$RDS_USER" -p"$RDS_PASSWORD" "$RDS_DATABASE" -s -N -e "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = '$RDS_DATABASE';")
    
    if [ "$TABLE_COUNT" -gt 0 ]; then
        log "‚úÖ Banco de dados verificado: $TABLE_COUNT tabelas encontradas"
    else
        error "‚ùå Nenhuma tabela encontrada no banco de dados"
        return 1
    fi
    
    # Verificar se o usu√°rio admin foi criado
    ADMIN_COUNT=$(mysql -h "$RDS_HOST" -P "$RDS_PORT" -u "$RDS_USER" -p"$RDS_PASSWORD" "$RDS_DATABASE" -s -N -e "SELECT COUNT(*) FROM users WHERE role = 'admin';")
    
    if [ "$ADMIN_COUNT" -gt 0 ]; then
        log "‚úÖ Usu√°rio administrador encontrado"
    else
        warn "‚ö†Ô∏è Usu√°rio administrador n√£o encontrado"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes do banco
show_database_info() {
    log "Informa√ß√µes do banco de dados:"
    echo ""
    echo "üóÑÔ∏è Configura√ß√µes do RDS:"
    echo "   Host: $RDS_HOST"
    echo "   Porta: $RDS_PORT"
    echo "   Usu√°rio: $RDS_USER"
    echo "   Banco: $RDS_DATABASE"
    echo ""
    echo "üë§ Usu√°rios administradores:"
    echo "   Email: admin@nhpersonal.com"
    echo "   Email: nholanda@nhpersonal.com"
    echo "   Senha: rdms95gn"
    echo ""
    echo "üîê Para conectar manualmente:"
    echo "   mysql -h $RDS_HOST -P $RDS_PORT -u $RDS_USER -p$RDS_DATABASE"
    echo ""
    echo "üìä Para verificar tabelas:"
    echo "   mysql -h $RDS_HOST -P $RDS_PORT -u $RDS_USER -p$RDS_DATABASE -e 'SHOW TABLES;'"
    echo ""
}

# Fun√ß√£o principal
main() {
    log "Iniciando configura√ß√£o do banco de dados NH-Personal..."
    
    # Verificar se o MySQL client est√° instalado
    if ! command -v mysql &> /dev/null; then
        error "MySQL client n√£o est√° instalado. Execute o script de instala√ß√£o primeiro."
        exit 1
    fi
    
    # Testar conex√£o
    if ! test_rds_connection; then
        error "N√£o foi poss√≠vel conectar ao RDS. Verifique as configura√ß√µes."
        exit 1
    fi
    
    # Criar banco de dados
    create_database
    
    # Executar migra√ß√µes do Prisma
    run_prisma_migrations
    
    # Inserir dados iniciais
    insert_initial_data
    
    # Verificar integridade
    verify_database
    
    # Mostrar informa√ß√µes
    show_database_info
    
    log "‚úÖ Configura√ß√£o do banco de dados conclu√≠da com sucesso!"
    echo ""
    echo "üéâ NH-Personal est√° pronto para uso!"
    echo "üåê Acesse: http://localhost:3000"
    echo "üìö API: http://localhost:3001/api"
    echo "üîç Health Check: http://localhost:3001/health"
}

# Executar fun√ß√£o principal
main "$@" 