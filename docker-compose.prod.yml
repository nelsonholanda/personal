version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: personal_trainer_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - personal_trainer_network_prod
    command: --default-authentication-plugin=mysql_native_password

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: personal_trainer_backend_prod
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      # DATABASE_URL ser√° configurado dinamicamente pelo backend usando AWS Secrets Manager
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      PORT: 3001
      # AWS Configuration
      AWS_REGION: ${AWS_REGION:-us-east-2}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      # AWS Secrets Manager Configuration
      AWS_DATABASE_SECRET_NAME: ${AWS_DATABASE_SECRET_NAME:-rds!db-da675fb5-6491-4bf4-981a-2fa9d6d5b811}
      AWS_JWT_SECRET_NAME: ${AWS_JWT_SECRET_NAME:-nh-personal/jwt}
    depends_on:
      - mysql
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - personal_trainer_network_prod
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: personal_trainer_frontend_prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_ENV: production
    depends_on:
      - backend
    networks:
      - personal_trainer_network_prod
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: personal_trainer_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - personal_trainer_network_prod
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  mysql_data_prod:
    driver: local

networks:
  personal_trainer_network_prod:
    driver: bridge 