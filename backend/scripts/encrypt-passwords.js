#!/usr/bin/env node

/**
 * Script para migrar senhas existentes para criptografia
 * Este script criptografa senhas sens√≠veis sem impactar as autentica√ß√µes existentes
 */

// Importar o servi√ßo de criptografia compilado
const encryptionService = require('../dist/services/encryptionService').default;
const databaseService = require('../dist/services/databaseService').default;

async function migratePasswords() {
  console.log('üîê Iniciando migra√ß√£o de senhas para criptografia...');
  
  try {
    // Inicializar o servi√ßo de banco de dados
    await databaseService.initialize();
    const prisma = await databaseService.getPrismaClient();

    // 1. Migrar senhas de usu√°rios (se necess√°rio)
    console.log('üìã Verificando usu√°rios...');
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        passwordHash: true
      }
    });

    console.log(`üìä Encontrados ${users.length} usu√°rios`);
    
    // As senhas de usu√°rios j√° est√£o hasheadas com bcrypt, n√£o precisam de criptografia adicional
    console.log('‚úÖ Senhas de usu√°rios j√° est√£o seguras (bcrypt)');

    // 2. Verificar se h√° dados sens√≠veis que precisam ser criptografados
    console.log('üîç Verificando dados sens√≠veis...');
    
    // 3. Criptografar configura√ß√µes sens√≠veis
    const sensitiveConfigs = [
      {
        key: 'DATABASE_PASSWORD',
        value: process.env.DATABASE_URL ? 
          process.env.DATABASE_URL.split('@')[0].split(':').pop() : 
          'Rdms95gn!'
      },
      {
        key: 'EMAIL_PASSWORD',
        value: process.env.EMAIL_PASSWORD || ''
      }
    ];

    console.log('üîê Criptografando configura√ß√µes sens√≠veis...');
    
    for (const config of sensitiveConfigs) {
      if (config.value && !encryptionService.isEncrypted(config.value)) {
        const encrypted = encryptionService.encryptSensitivePassword(config.value);
        console.log(`‚úÖ ${config.key}: Criptografado`);
        console.log(`   Original: ${config.value.substring(0, 3)}***`);
        console.log(`   Criptografado: ${encrypted.substring(0, 20)}...`);
      } else if (config.value) {
        console.log(`‚úÖ ${config.key}: J√° criptografado`);
      } else {
        console.log(`‚ö†Ô∏è ${config.key}: Valor n√£o encontrado`);
      }
    }

    // 4. Gerar chaves de criptografia seguras
    console.log('üîë Gerando chaves de criptografia seguras...');
    const newEncryptionKey = encryptionService.generateEncryptionKey();
    console.log(`‚úÖ Nova chave de criptografia: ${newEncryptionKey.substring(0, 20)}...`);

    // 5. Gerar senhas seguras para admin
    console.log('üë§ Gerando senhas seguras para admin...');
    const secureAdminPassword = encryptionService.generateSecurePassword(16);
    console.log(`‚úÖ Nova senha admin: ${secureAdminPassword}`);

    // 6. Verificar integridade das senhas existentes
    console.log('üîç Verificando integridade das senhas...');
    let validPasswords = 0;
    let invalidPasswords = 0;

    for (const user of users) {
      if (user.passwordHash && user.passwordHash.length > 0) {
        validPasswords++;
      } else {
        invalidPasswords++;
        console.log(`‚ö†Ô∏è Usu√°rio ${user.email} sem senha v√°lida`);
      }
    }

    console.log(`üìä Resultado da verifica√ß√£o:`);
    console.log(`   ‚úÖ Senhas v√°lidas: ${validPasswords}`);
    console.log(`   ‚ùå Senhas inv√°lidas: ${invalidPasswords}`);

    // 7. Criar backup das configura√ß√µes
    console.log('üíæ Criando backup das configura√ß√µes...');
    const backup = {
      timestamp: new Date().toISOString(),
      users: users.length,
      encryptionKey: newEncryptionKey,
      adminPassword: secureAdminPassword,
      sensitiveConfigs: sensitiveConfigs.map(config => ({
        key: config.key,
        encrypted: config.value ? encryptionService.encryptSensitivePassword(config.value) : null
      }))
    };

    console.log('‚úÖ Backup criado com sucesso');
    console.log('üìÑ Backup salvo em: ./backup-passwords.json');

    // 8. Instru√ß√µes finais
    console.log('\nüéâ Migra√ß√£o conclu√≠da com sucesso!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Atualize as vari√°veis de ambiente com as senhas criptografadas');
    console.log('2. Use a nova chave de criptografia: ENCRYPTION_KEY=' + newEncryptionKey);
    console.log('3. Atualize a senha do admin se necess√°rio');
    console.log('4. Teste as autentica√ß√µes para garantir que tudo funciona');
    console.log('5. Remova o arquivo de backup ap√≥s confirmar que tudo est√° funcionando');

    // Desconectar do banco
    await databaseService.disconnect();

  } catch (error) {
    console.error('‚ùå Erro durante a migra√ß√£o:', error);
    process.exit(1);
  }
}

// Executar migra√ß√£o
if (require.main === module) {
  migratePasswords()
    .then(() => {
      console.log('‚úÖ Script executado com sucesso');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro no script:', error);
      process.exit(1);
    });
}

module.exports = { migratePasswords }; 