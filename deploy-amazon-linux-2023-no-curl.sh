#!/bin/bash

# Script de Deploy para Amazon Linux 2023 - NH Personal Trainer
# Vers√£o: 2.1.0 - Amazon Linux 2023 (Sem depend√™ncia do curl)

set -e  # Para o script se houver erro

echo "üöÄ Iniciando deploy para Amazon Linux 2023 (vers√£o sem curl)..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERRO]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCESSO]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[AVISO]${NC} $1"
}

# Verificar se estamos rodando como root ou com sudo
if [ "$EUID" -eq 0 ]; then
    error "N√£o execute este script como root. Use sudo quando necess√°rio."
fi

log "üìã Verificando sistema..."

# Verificar se √© Amazon Linux 2023
if ! grep -q "Amazon Linux release 2023" /etc/os-release; then
    warning "Este script foi otimizado para Amazon Linux 2023. Outras distribui√ß√µes podem n√£o funcionar corretamente."
fi

# Atualizar sistema
log "üîÑ Atualizando sistema..."
sudo dnf update -y

# Instalar depend√™ncias b√°sicas (sem curl)
log "üì¶ Instalando depend√™ncias b√°sicas..."
sudo dnf install -y git wget unzip jq

success "Depend√™ncias b√°sicas instaladas"

# Instalar Docker
log "üê≥ Instalando Docker..."
sudo dnf install -y docker

# Iniciar e habilitar Docker
sudo systemctl start docker
sudo systemctl enable docker

# Adicionar usu√°rio ao grupo docker
sudo usermod -aG docker $USER

success "Docker instalado e configurado"

# Instalar Docker Compose usando wget
log "üì¶ Instalando Docker Compose..."
DOCKER_COMPOSE_VERSION=$(wget -qO- https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
sudo wget -O /usr/local/bin/docker-compose "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)"
sudo chmod +x /usr/local/bin/docker-compose

# Criar link simb√≥lico
sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose

success "Docker Compose instalado"

# Configurar firewall (se estiver usando firewalld)
log "üîí Configurando firewall..."
if command -v firewall-cmd &> /dev/null; then
    sudo firewall-cmd --permanent --add-port=80/tcp
    sudo firewall-cmd --permanent --add-port=443/tcp
    sudo firewall-cmd --permanent --add-port=3001/tcp
    sudo firewall-cmd --reload
    success "Firewall configurado"
else
    warning "Firewalld n√£o encontrado. Configure o firewall manualmente."
fi

# Clonar reposit√≥rio
log "üì• Clonando reposit√≥rio..."
if [ ! -d "projeto-personal" ]; then
    git clone https://github.com/SEU_USUARIO/SEU_REPOSITORIO.git projeto-personal
fi
cd projeto-personal

# Configurar vari√°veis de ambiente
log "‚öôÔ∏è Configurando vari√°veis de ambiente..."

# Backend .env
cat > backend/.env <<EOF
ENCRYPTION_KEY=nh-personal-encryption-key-2024
DB_HOST=personal-db.cbkc0cg2c7in.us-east-2.rds.amazonaws.com
DB_PORT=3306
DB_USERNAME=admin
DB_PASSWORD_ENCRYPTED=f0ab35538ff8e4e7825363b2b5a348dc:654375d1c2216dc33d8c917db2ddc501
DB_NAME=personal_trainer_db
NODE_ENV=production
PORT=3001
JWT_ACCESS_TOKEN_SECRET=nh-personal-access-token-secret-2024
JWT_REFRESH_TOKEN_SECRET=nh-personal-refresh-token-secret-2024
EOF

# Frontend .env
cat > frontend/.env <<EOF
REACT_APP_API_URL=http://localhost:3001/api
NODE_ENV=production
EOF

success "Vari√°veis de ambiente configuradas"

# Recarregar grupos do usu√°rio
log "üîÑ Recarregando grupos do usu√°rio..."
newgrp docker

# Construir e iniciar containers
log "üê≥ Construindo e iniciando containers..."
sudo docker-compose -f docker-compose.prod.yml up --build -d

success "Containers iniciados"

# Aguardar servi√ßos estarem prontos
log "‚è≥ Aguardando servi√ßos estarem prontos..."
sleep 30

# Executar migra√ß√µes
log "üóÑÔ∏è Executando migra√ß√µes do banco..."
sudo docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy

success "Migra√ß√µes executadas"

# Criar usu√°rio administrador
log "üë§ Criando usu√°rio administrador..."
sudo docker-compose -f docker-compose.prod.yml exec -T backend node scripts/create-admin-user.js

success "Usu√°rio administrador criado"

# Verificar status dos servi√ßos
log "üìä Verificando status dos servi√ßos..."
sudo docker-compose -f docker-compose.prod.yml ps

# Verificar se todos os servi√ßos est√£o rodando
if sudo docker-compose -f docker-compose.prod.yml ps | grep -q "Exit"; then
    warning "Alguns servi√ßos n√£o iniciaram corretamente"
    sudo docker-compose -f docker-compose.prod.yml logs --tail=50
else
    success "Todos os servi√ßos est√£o rodando"
fi

# Configurar logs
log "üìù Configurando logs..."
sudo mkdir -p /var/log/nh-personal
sudo chown $USER:$USER /var/log/nh-personal

# Criar script de monitoramento
log "üìà Configurando monitoramento..."
cat > monitor.sh << 'EOF'
#!/bin/bash
# Script de monitoramento para NH Personal Trainer - Amazon Linux 2023

LOG_FILE="/var/log/nh-personal/monitor.log"

while true; do
    echo "$(date): Verificando servi√ßos..." >> $LOG_FILE
    
    # Verificar se os containers est√£o rodando
    if ! sudo docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
        echo "$(date): ERRO - Alguns servi√ßos pararam!" >> $LOG_FILE
        # Aqui voc√™ pode adicionar notifica√ß√£o por email/SMS
    fi
    
    # Verificar uso de mem√≥ria
    MEMORY_USAGE=$(sudo docker stats --no-stream --format "table {{.Container}}\t{{.MemUsage}}" | grep -E "(frontend|backend|mysql)" | awk '{sum+=$2} END {print sum}')
    echo "$(date): Uso de mem√≥ria: $MEMORY_USAGE" >> $LOG_FILE
    
    sleep 300  # Verificar a cada 5 minutos
done
EOF

chmod +x monitor.sh

# Criar script de backup
log "üìã Configurando backup autom√°tico..."
cat > backup.sh << 'EOF'
#!/bin/bash
# Script de backup para NH Personal Trainer - Amazon Linux 2023

BACKUP_DIR="/var/log/nh-personal/backups"
DATE=$(date +%Y%m%d_%H%M%S)

mkdir -p $BACKUP_DIR

# Backup do banco de dados (se estiver usando MySQL local)
if sudo docker-compose -f docker-compose.prod.yml ps mysql | grep -q "Up"; then
    sudo docker-compose -f docker-compose.prod.yml exec mysql mysqldump -u root -p${MYSQL_ROOT_PASSWORD:-password} personal_trainer_db > $BACKUP_DIR/db_backup_$DATE.sql
fi

# Backup dos logs
tar -czf $BACKUP_DIR/logs_backup_$DATE.tar.gz /var/log/nh-personal/

# Manter apenas os √∫ltimos 7 backups
find $BACKUP_DIR -name "*.sql" -mtime +7 -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +7 -delete

echo "Backup criado: $BACKUP_DIR"
EOF

chmod +x backup.sh

# Configurar backup autom√°tico no crontab
(crontab -l 2>/dev/null; echo "0 2 * * * $(pwd)/backup.sh") | crontab -

success "Backup autom√°tico configurado"

# Configurar limpeza autom√°tica de logs do Docker
log "üßπ Configurando limpeza autom√°tica..."
sudo tee /etc/cron.daily/docker-cleanup << 'EOF'
#!/bin/bash
# Limpeza autom√°tica de containers e imagens Docker

# Remover containers parados
sudo docker container prune -f

# Remover imagens n√£o utilizadas
sudo docker image prune -f

# Remover volumes n√£o utilizados
sudo docker volume prune -f

# Remover redes n√£o utilizadas
sudo docker network prune -f
EOF

sudo chmod +x /etc/cron.daily/docker-cleanup

success "Limpeza autom√°tica configurada"

# Obter IP p√∫blico da inst√¢ncia usando wget
PUBLIC_IP=$(wget -qO- http://169.254.169.254/latest/meta-data/public-ipv4)

echo ""
echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
echo "=================================="
echo "üåê URLs da aplica√ß√£o:"
echo "   Frontend: http://$PUBLIC_IP:3000"
echo "   Backend:  http://$PUBLIC_IP:3001"
echo "   Health Check: http://$PUBLIC_IP:3001/health"
echo ""
echo "üë§ Credenciais de Administrador:"
echo "   Email: nholanda@nhpersonal.com"
echo "   Senha: P10r1988!"
echo ""
echo "üîß Comandos √∫teis:"
echo "   Ver logs: sudo docker-compose -f docker-compose.prod.yml logs -f"
echo "   Reiniciar: sudo docker-compose -f docker-compose.prod.yml restart"
echo "   Parar: sudo docker-compose -f docker-compose.prod.yml down"
echo "   Monitorar: ./monitor.sh"
echo "   Backup manual: ./backup.sh"
echo ""
echo "‚ö†Ô∏è  PR√ìXIMOS PASSOS:"
echo "   1. Configure um dom√≠nio e SSL"
echo "   2. Configure backup externo"
echo "   3. Configure monitoramento externo"
echo "   4. Configure alertas por email"
echo "   5. Teste todos os recursos da aplica√ß√£o"
echo ""
echo "üìû Suporte: Entre em contato se precisar de ajuda"
echo ""

success "Deploy finalizado com sucesso!" 